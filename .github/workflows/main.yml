---
name: CI & Release

# Workflow name based on selected inputs. Fallback to default Github naming when expression evaluates to empty string
run-name: >-
  ${{
    inputs.release && 'Build ➤ Test ➤ Publish to NPM' ||
    github.event_name == 'workflow_dispatch' && 'Build' ||
    ''
  }}

on:
  push:
    branches: [master]
  # https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch:
    inputs:
      release:
        description: Release new version
        required: true
        default: false
        type: boolean

concurrency:
  # On PRs builds will cancel if new pushes happen before the CI completes, as it defines `github.head_ref` and gives it the name of the branch the PR wants to merge into
  # Otherwise `github.run_id` ensures that you can quickly merge a queue of PRs without causing tests to auto cancel on any of the commits pushed to main.
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  log-the-inputs:
    name: Log inputs
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Inputs: $INPUTS"
        env:
          INPUTS: ${{ toJSON(inputs) }}

  build:
    runs-on: ubuntu-latest
    name: Lint & Build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: lts/*
      - run: npm ci
      - run: npm run lint --if-present
      - run: npm run prepublishOnly --if-present

  release:
    needs: [build]
    if: always() && github.event.inputs.release == 'true' && needs.build.result != 'failure'
    runs-on: ubuntu-latest
    name: Semantic release
    steps:
      - uses: actions/checkout@v4
        with:
          # Need to fetch entire commit history to
          # analyze every commit since last release
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: lts/*
      - run: npm ci
        # Branches that will release new versions are defined in .releaserc.json
      - run: npx semantic-release
        # Don't allow interrupting the release step if the job is cancelled, as it can lead to an inconsistent state
        # e.g. git tags were pushed but it exited before `npm publish`
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        # Re-run semantic release with rich logs if it failed to publish for easier debugging
      - run: npx semantic-release --dry-run --debug
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}